{
  "title": "Foret Design System",
  "pages": {
    "home": "Home",
    "getStarted": "Get Started",
    "designPrinciple": "Design Principle",
    "color": "Color",
    "components": "Components"
  },
  "common": {
    "copied": "Copied"
  },
  "footer": {
    "contactUs": "Contact Us"
  },
  "drawer": {
    "preferredLanguageTitle": "Select your preferred language"
  },
  "404": {
    "title": "Page not found!",
    "description": "Sorry, but the page you were looking for could not be found."
  },
  "home": {
    "hero": {
      "title": "Foret",
      "subtitle": "Foret is open source design system for building web applications related to nature with Foret design language.",
      "getStartedButton": "Get Started"
    },
    "intro": {
      "description1": "The Foret Design System is a personal project started to experience the creation of a design system.",
      "description2": "First, I needed a brand before building a design system. Since I was always interested in nature, I created a fake brand called Foret, which has a mission of 'creating a green space within the living area for modern people in the city.'",
      "description3": "After creating the brand, I defined design principles that serve as guidelines to follow when approaching the design system. Within the design principles, I selected basic elements of the design system such as color and font that match the brand, and developed UI components based on them."
    }
  },
  "getStarted": {
    "hero": {
      "title": "Get Started",
      "subtitle1": "The Foret Design System is served both React and Angular.",
      "subtitle2": "Head over to Frameworks for all the information you need to get started."
    },
    "content": {
      "installation": {
        "title": "Installation",
        "description1": "Foret components are served as an ",
        "description2": ". Add them to your project by running:",
        "installViaNpm": "Using npm:",
        "installViaYarn": "If you prefer yarn:",
        "installEmotionCore": "Don’t forget to install the @emotion/core ^10.0.0 also."
      },
      "settingUp": {
        "title": "Setting up Your App",
        "description1": "All Foret applications start with a Foret. The Foret is ThemeProvider which is based on ",
        "description2": ". Therefore, you should render your application inside the Foret like below.",
        "customizingTheme": {
          "title": "Customizing Theme",
          "description": "You can customize the theme to suit you needs. Below example is a way of customizing the theme."
        },
        "defaultTheme": {
          "title": "Default Theme",
          "description": "The default theme provided by Foret is as follows, and you can access the properties of the default theme or customized theme."
        }
      },
      "contributing": {
        "title": "Contributing",
        "description1": "We want to provide only components of the highest quality. We can’t do that without your feedback. If you have any suggestions or any issues about what we can do to improve components, please create an issue or submit a pull request at ",
        "description2": " "
      }
    }
  },
  "color": {
    "hero": {
      "title": "Color",
      "subtitle1": "Color is a fundamental component of the design system and represents brand."
    }
  },
  "designPrinciple": {
    "hero": {
      "title": "Design Principle",
      "subtitle1": "Design principles define and convey the key features of the design system.",
      "subtitle2": "The Foret Design System is built on the following design principles."
    },
    "content": {
      "designPrinciple": {
        "principle1Title": "Simple",
        "principle1Description": "Absolutely necessary and minimal design.",
        "principle2Title": "Comfortable",
        "principle2Description": "Not only should it look comfortable in appearance, it should also feel comfortable in usability.",
        "principle3Title": "Natural",
        "principle3Description": "It must not splash. The role of each design element should be taken for granted and naturally."
      }
    }
  },
  "components": {
    "hero": {
      "title": "Components",
      "subtitle1": "Components are the building blocks of the design system.",
      "subtitle2": "And it is designed to solve a specific UI problem."
    },
    "shared": {
      "notes": "Notes",
      "imports": "Imports",
      "liveDemo": "Live Demo",
      "props": "Props",
      "properties": "Properties"
    },
    "button": {
      "title": "Button",
      "description": "A button is an interactive element that results in an action described on it.",
      "notes": {
        "description": "All alphabets are transformed to uppercase."
      },
      "propsDescription": {
        "button": {
          "disabled": "If set to true, the button would be disabled.",
          "children": "The content of the button."
        }
      }
    },
    "checkbox": {
      "title": "Checkbox",
      "description": "A checkbox is used when a user to pick multiple options from a list. Users can select 0, 1, or any number of options.",
      "propsDescription": {
        "checkboxGroup": {
          "legendText": "The label of checkbox group.",
          "disabled": "If set to true, every checkbox in checkbox group would be disabled.",
          "onChange": "Callback function to invoke when the user clicks on the checkbox."
        },
        "checkbox": {
          "id": "The id of a checkbox. It's used to identifies the checkbox.",
          "labelText": "The label of a checkbox.",
          "checked": "If set to true, the checkbox would be checked."
        }
      },
      "propertiesDescription": {
        "checkboxGroup": {
          "legendText": "The label of a checkbox group.",
          "disabled": "If set to true, every checkbox in checkbox group would be disabled.",
          "changeCheckbox": "Callback function to invoke when the user clicks on the checkbox."
        },
        "checkbox": {
          "id": "The id of a checkbox. It's used to identifies the checkbox.",
          "labelText": "The label of a checkbox.",
          "checked": "If set to true, the checkbox would be checked."
        }
      }
    },
    "radioButton": {
      "title": "Radio Button",
      "description": "A radio button is used when a user to pick exactly one option from a list.",
      "propsDescription": {
        "radioButtonGroup": {
          "legendText": "The label of a radio button group.",
          "checkedValue": "If it matches the value property of the radio button, that radio button will be set up as checked.",
          "disabled": "If set to true, every radio button in radio button group would be disabled.",
          "onChange": "Callback function to invoke when the user clicks on the radio button."
        },
        "radioButton": {
          "id": "The id of a radio button. It's used to identifies the radio button.",
          "labelText": "The label of a radio button.",
          "value": "The value of a radio button."
        }
      },
      "propertiesDescription": {
        "radioButtonGroup": {
          "legendText": "The label of a radio button group.",
          "checkedValue": "If it matches the value property of the radio button, that radio button will be set up as checked.",
          "disabled": "If set to true, every radio button in radio button group would be disabled.",
          "changeRadioButton": "Callback function to invoke when the user clicks on the radio button."
        },
        "radioButton": {
          "id": "The id of a radio button. It's used to identifies the radio button.",
          "labelText": "The label of a radio button.",
          "value": "The value of a radio button."
        }
      }
    },
    "select": {
      "title": "Select",
      "description": "A select allows users to select one option from many options.",
      "propsDescription": {
        "select": {
          "id": "The id of a select.",
          "legendText": "The label of a select.",
          "selectedValue": "If it matches the value property of the select, that select will be selected.",
          "placeholder": "The placeholder of a select.",
          "disabled": "If set to true, the select would be disabled.",
          "onChange": "Callback function to invoke when the user selects an option."
        },
        "selectItemGroup": {
          "labelText": "The label of a select item group.",
          "disabled": "If set to true, the select item group would be disabled."
        },
        "selectItem": {
          "value": "The value of a select item.",
          "labelText": "The label of a select item.",
          "disabled": "If set to true, the select item would be disabled."
        }
      },
      "propertiesDescription": {
        "select": {
          "id": "The id of a select.",
          "legendText": "The label of a select.",
          "placeholder": "The placeholder of a select.",
          "disabled": "If set to true, the select would be disabled.",
          "changeSelect": "Callback function to invoke when the user selects an option."
        }
      }
    },
    "tab": {
      "title": "Tab",
      "description": "Tabs allow users to alternate between views within the same context.",
      "propsDescription": {
        "tabGroup": {
          "selectedValue": "If it matches the value property of the tab, that tab will be selected.",
          "onChange": "Callback function to invoke when the user clicks on the tab."
        },
        "tab": {
          "id": "The id of tab. It's used to identifies the tab.",
          "labelText": "The label of a tab.",
          "value": "The value of a tab."
        }
      },
      "propertiesDescription": {
        "tabGroup": {
          "selectedValue": "If it matches the value property of the tab, that tab will be selected.",
          "changeTab": "Callback function to invoke when the user clicks on the tab."
        },
        "tab": {
          "id": "The id of tab. It's used to identifies the tab.",
          "labelText": "The label of a tab.",
          "value": "The value of a tab."
        }
      }
    },
    "toggle": {
      "title": "Toggle",
      "description": "A toggle is used to quickly switch between two mutually exclusive options.",
      "propsDescription": {
        "toggle": {
          "id": "The id of toggle. It's used to identifies the toggle.",
          "disabled": "If set to true, the toggle would be disabled.",
          "checked": "If set to true, the toggle would be checked.",
          "onToggle": "Callback function to invoke when the user clicks on the toggle."
        }
      },
      "propertiesDescription": {
        "toggle": {
          "id": "The id of toggle. It's used to identifies the toggle.",
          "disabled": "If set to true, the toggle would be disabled.",
          "checked": "If set to true, the toggle would be checked.",
          "toggle": "Callback function to invoke when the user clicks on the toggle."
        }
      }
    }
  }
}
